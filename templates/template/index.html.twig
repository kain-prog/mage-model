{% extends 'base2.html.twig' %}

{% block title %}MM - Template{% endblock %}

{% block styles %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/froala-editor/4.0.0/css/froala_editor.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/froala-editor/4.0.0/js/froala_editor.pkgd.min.js"></script>
{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fontfaceobserver/2.3.0/fontfaceobserver.min.js" ></script>
{% endblock %}

{% block models_active %}fill-gray-800 bg-white{% endblock %}


{% block styles_in_body %}
    <style id="style">
        .canvas-container{
            width: 100% !important;
            height: 100% !important;
            max-width: 1080px !important;
            min-height: 1080px !important;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.34);
        }

        #cvs{
            width: 100% !important;
            height: 100% !important;
            max-width: 1080px !important;
            min-height: 1080px !important;
        }
    </style>
{% endblock %}

{% block body %}

    <section class="container px-4 m-auto">
        <input id="template-loaded" type="hidden" value="{{ model.image }}">
        <input id="fonts-loaded" type="hidden" value="{{ model.fonts }}">

        <article class="p-8 my-14 border rounded-2xl border-stone-200 container">

                <div class="m-auto">
                    <h2 class="text-center mb-8">Pré Visualização</h2>
                </div>

                <div class="flex justify-center items-center">
                    <canvas id="cvs" height="1080" width="1080" ></canvas>

                </div>

                <div class="flex justify-evenly mt-16 gap-44 items-center">

                    <div class="">
                        <form id="send-elements" class="my-12" >
                            <div class="form-control mb-3">
                                <label for="send-img">Inserir nova imagem:</label>
                            </div>
                            <div class="form-control mb-3">
                                <input id="send-img" name="img" type="file">
                            </div>
                            <div class="form-control mb-3">
                                <button class="btn py-2 btn-sm w-full rounded bg-gray-800 active:bg-gray-400 border-slate-300 text-white" type="submit">Enviar Imagem</button>
                            </div>

                        </form>

                        <div id="position-img" class="flex gap-5 justify-center">
                            <button id="move-forward" class="btn btn-sm px-4 py-2 rounded bg-gray-800 active:bg-gray-400 border-slate-300 text-white">Mover para frente</button>
                            <button id="move-backward" class="btn btn-sm px-4 py-2 bg-gray-800 active:bg-gray-400 border-slate-300 text-white rounded">Mover para trás</button>

                        </div>
                        <div class="my-5 w-full">
                            <button id="remove-element" class="btn btn-sm w-full bg-red-600 active:bg-red-300 px-4 py-2 text-white rounded">Remover Elemento</button>
                        </div>

                        <div class="flex">
                            <input type="checkbox" class="shrink-0 mt-0.5 border-gray-200 rounded text-blue-600 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-800 dark:border-neutral-700 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-offset-gray-800" id="hs-checked-checkbox" checked="">
                            <label for="hs-checked-checkbox" class="text-sm text-gray-500 ms-3 dark:text-neutral-400">Guardar template?</label>
                        </div>
                        <div class="max-w-sm space-y-3 form-control">
                            <input id="hs-checked-name" type="text" class="border my-3 border-gray-300 py-2 px-4 rounded w-full" placeholder="Nome do meu template" />
                        </div>
                    </div>

                    <div>
                        <div class="form-control mb-3">
                            <div id="toolbar">
                                <div class="mb-3">
                                    <div class="form-control">
                                        <label for="font-family-dropdown" class="text-sm">Selecione sua fonte:</label>
                                    </div>
                                    <select id="font-family-dropdown" class="px-5 py-2 border border-slate-200 rounded mb-3">
                                        <option value="Arial">Arial</option>
                                        <option value="Verdana">Verdana</option>
                                        <option value="Times New Roman">Times New Roman</option>
                                        <option value="Georgia">Georgia</option>
                                        <option value="Trebuchet MS">Trebuchet MS</option>
                                        <option value="Tahoma">Tahoma</option>
                                        <option value="Arial Black">Arial Black</option>
                                        <option value="Comic Sans MS">Comic Sans MS</option>
                                        <option value="Impact">Impact</option>
                                        <option value="Courier New">Courier New</option>
                                        <option value="Lucida Sans Unicode">Lucida Sans Unicode</option>
                                        <option value="Palatino Linotype">Palatino Linotype</option>
                                        <option value="Book Antiqua">Book Antiqua</option>
                                        <option value="Arial Narrow">Arial Narrow</option>
                                        <option value="Calibri">Calibri</option>
                                        <option value="Century Gothic">Century Gothic</option>
                                        <option value="Garamond">Garamond</option>
                                        <option value="Cambria">Cambria</option>
                                        <option value="Franklin Gothic Medium">Franklin Gothic Medium</option>
                                        <option value="Rockwell">Rockwell</option>
                                        <option value="Segoe UI">Segoe UI</option>
                                        <option value="Tahoma">Tahoma</option>
                                        <option value="Verdana">Verdana</option>
                                    </select>
                                    <div>
                                        <button id="lock-toggle" class=" btn btn-sm px-4 py-2 bg-slate-100 border active:bg-slate-50 border-slate-200 rounded mb-3">Travar/Destravar</button>
                                    </div>
                                </div>
                                <button id="bold" class="btn btn-sm px-4 py-2 me-2 bg-slate-100 border active:bg-slate-50 border-slate-200 rounded mb-3">Negrito</button>
                                <button id="italic" class="btn btn-sm px-4 py-2 bg-slate-100 mx-2 border active:bg-slate-50 border-slate-200 rounded mb-3">Italico</button>
{#                                <button id="underline">Underline</button>#}
                                <input type="color" id="color" class="mx-2">
                                <input type="color" id="bg-color" class="mx-2">
                                <input type="range" min="5" max="150" value="40" id="size" class="text-white">
                            </div>
                            <textarea id="editor" class="shadow w-full px-3 py-3 border border-slate-200 rounded outline-none focus:border-slate-500" contenteditable="true"></textarea>
                        </div>

                        <button id="send-text" class="btn btn-sm px-5 py-2 text-white mt-3 rounded bg-gray-800 active:bg-gray-400 border-slate w-full">Enviar</button>

                    </div>

                </div>


                <div class="flex justify-end gap-12 mt-24">

                    <button id="save-canvas" class="text-sm px-10 py-2 bg-lime-500 text-slate-50">
                        SALVAR
                    </button>

                    <a class="text-sm px-10 py-2 bg-rose-600 text-slate-50" href="{{ path('app_model') }}">
                        CANCELAR
                    </a>

                </div>

        </article>
    </section>

    <script src="{{ asset('build/fabric.min.js') }}"></script>
    <script>
        let canvas = new fabric.Canvas('cvs');

        const styleHTML = document.querySelector('#style');
        const fontsLoaded = document.querySelector('#fonts-loaded').value;

        function getFontNameFromLink(link) {
            const regex = /family=([^:&]+)/;
            const match = link.match(regex);
            return match ? match[1].replace(/\+/g, " ") : null;
        }

        styleHTML.textContent = '\n' + fontsLoaded + '\n' + styleHTML;

        const fontsArray = fontsLoaded.split('; ');
        let outputFonts = [];

        Promise.all(
            fontsArray.map((element) => {
                const fontName = getFontNameFromLink(element);
                outputFonts.push(fontName);
                let optionElement = document.createElement("option");
                optionElement.value = fontName;
                optionElement.text = fontName;
                document.querySelector('#font-family-dropdown').add(optionElement);
                return new FontFaceObserver(fontName).load();
            })
        ).then(() => {
            const templateLoaded = JSON.parse(document.querySelector('#template-loaded').value);
            canvas.loadFromJSON(templateLoaded, canvas.renderAll.bind(canvas), function(o, object) {
                canvas.renderAll();
            });
        }).catch((err) => {
            console.error('Erro ao carregar as fontes:', err);
        });

    </script>

    <script>

        let hsCheckedCheckbox = document.querySelector('#hs-checked-checkbox');
        let hsCheckedName = document.querySelector('#hs-checked-name');
        let backgroundImage;
        let canvasStateStack = [];
        let isRedoing = false;

        hsCheckedCheckbox.addEventListener('change' , function () {

            if(!hsCheckedCheckbox.checked){
                hsCheckedName.classList.add('hidden');
            }else{
                hsCheckedName.classList.remove('hidden');
            }
        })

        function saveCanvasState() {
            if (!isRedoing) {
                const canvasState = JSON.stringify(canvas);
                canvasStateStack.push(canvasState);
            }
            isRedoing = false;
        }

        // Função para carregar o estado do canvas a partir de uma string JSON
        function loadCanvasState(state) {
            canvas.loadFromJSON(state, function() {
                canvas.renderAll();
            });
        }

        // Função para desfazer a última ação
        function undo() {
            if (canvasStateStack.length > 1) {
                isRedoing = true;
                canvasStateStack.pop(); // Remove o estado atual
                const previousState = canvasStateStack[canvasStateStack.length - 1];
                loadCanvasState(previousState);
            }
        }

        // Adiciona um evento para capturar `Ctrl + Z` e desfazer a última ação
        document.addEventListener('keydown', function(event) {
            if (event.ctrlKey && event.key === 'z') {
                event.preventDefault();
                undo();
            }
        });

        // Captura o estado do canvas antes de qualquer modificação
        canvas.on('object:modified', saveCanvasState);
        canvas.on('object:added', saveCanvasState);
        canvas.on('object:removed', saveCanvasState);

        let sendElements = document.querySelector('#send-elements');
        let sendImg = document.querySelector('#send-img');
        let positionImg = document.querySelector('#position-img');

        sendElements.addEventListener('submit', function(e){
            e.preventDefault();

            let file = sendImg.files[0];

            let reader = new FileReader();

            reader.onload = function(event) {
                fabric.Image.fromURL(event.target.result, function(img) {
                    // img.scale(0.25);
                    canvas.add(img);
                });
            };

            reader.readAsDataURL(file);

        });

        document.querySelector('#move-forward').addEventListener('click', function() {
            let selectedObject = canvas.getActiveObject();
            if (selectedObject) {
                canvas.bringForward(selectedObject);
            }
        });

        document.querySelector('#move-backward').addEventListener('click', function() {
            let selectedObject = canvas.getActiveObject();
            if (selectedObject) {
                canvas.sendBackwards(selectedObject);
            }
        });

        document.querySelector('#remove-element').addEventListener('click', function() {
            let selectedObject = canvas.getActiveObject();
            if (selectedObject) {
                canvas.remove(selectedObject);
            }
        });

        document.querySelector('#save-canvas').addEventListener('click', function() {

            var canvasDataUrl = canvas.toDataURL({
                format: 'png'
            });

            if(hsCheckedCheckbox.checked) {
                if(!hsCheckedName.value){
                    hsCheckedName.classList.add('border-red-600', 'outline-none');
                    return;
                }
            }

            const downloadLink = document.createElement('a');
            downloadLink.href = canvasDataUrl;
            downloadLink.download = 'canvas_export.png';

            document.body.appendChild(downloadLink);
            downloadLink.click();

            document.body.removeChild(downloadLink);
        });

        function setStyle(object, styleName, value) {
            if (object.setSelectionStyles && object.isEditing) {
                var style = {};
                style[styleName] = value;
                object.setSelectionStyles(style);
            } else {
                object[styleName] = value;
            }
        }

        function getStyle(object, styleName) {
            return (object.getSelectionStyles && object.isEditing) ?
                object.getSelectionStyles()[styleName] :
                object[styleName];
        }

        function addHandler(id, fn, eventName) {
            document.getElementById(id)[eventName || 'onclick'] = function() {
                let obj = canvas.getActiveObject();
                if (obj) {
                    fn.call(this, obj);
                    canvas.renderAll();
                }
            };
        }

        addHandler('bold', function(obj) {
            var selectionStart = obj.selectionStart;
            var selectionEnd = obj.selectionEnd;
            var fontWeight = getStyle(obj, 'fontWeight');

            var isBold = fontWeight === 'bold' || fontWeight === '700';
            var style = isBold ? 'normal' : 'bold';

            if (selectionStart !== selectionEnd) {
                obj.setSelectionStyles({ fontWeight: style }, selectionStart, selectionEnd);
            } else {
                setStyle(obj, 'fontWeight', style);
            }

            canvas.renderAll();
        });

        addHandler('italic', function(obj) {
            var selectionStart = obj.selectionStart;
            var selectionEnd = obj.selectionEnd;
            var fontStyle = getStyle(obj, 'fontStyle');

            var isItalic = fontStyle === 'italic';
            var style = isItalic ? 'normal' : 'italic';

            if (selectionStart !== selectionEnd) {
                obj.setSelectionStyles({ fontStyle: style }, selectionStart, selectionEnd);
            } else {
                setStyle(obj, 'fontStyle', style);
            }

            canvas.renderAll();
        });

        canvas.on('selection:updated', function(event) {
            var obj = event.target;
            if (obj && obj.type === 'i-text') {
            }
        });

        addHandler('color', function(obj) {
            setStyle(obj, 'fill', this.value);
        }, 'onchange');

        addHandler('bg-color', function(obj) {
            setStyle(obj, 'textBackgroundColor', this.value);
        }, 'onchange');

        addHandler('size', function(obj) {
            setStyle(obj, 'fontSize', parseInt(this.value, 10));
        }, 'onchange');

        document.querySelector('#send-text').addEventListener('click', function() {
            let text = document.querySelector('#editor').value.trim();
            console.log(text);

            if (text !== "") {
                var fabricText = new fabric.IText(text, {
                    left: 200,
                    top: 400,
                    fontSize: 100,
                    fontFamily: 'Arial'
                });

                canvas.add(fabricText);
            }
        });

        document.querySelector('#font-family-dropdown').addEventListener('change', function() {
            let selectedFont = this.value;
            let activeObject = canvas.getActiveObject();

            if (activeObject && activeObject.type === 'i-text') {
                activeObject.set('fontFamily', selectedFont);
                canvas.renderAll();
            } else {
                alert('Selecione um texto antes de mudar a fonte.');
            }
        });

        // Função para travar/destravar o objeto selecionado
        function toggleLockObject() {
            const activeObject = canvas.getActiveObject();
            if (activeObject) {
                const isLocked = activeObject.lockMovementX && activeObject.lockMovementY && activeObject.lockScalingX && activeObject.lockScalingY && activeObject.lockRotation;
                activeObject.set({
                    lockMovementX: !isLocked,
                    lockMovementY: !isLocked,
                    lockScalingX: !isLocked,
                    lockScalingY: !isLocked,
                    lockRotation: !isLocked,
                    hasControls: !isLocked, // Mostra/Esconde os controles de redimensionamento/rotação
                    // selectable: isLocked ? false : true // Habilita/Desabilita a seleção
                });

                // Cria ou remove uma camada invisível para permitir a seleção de objetos abaixo do objeto travado
                if (!isLocked) {
                    const rect = new fabric.Rect({
                        left: activeObject.left,
                        top: activeObject.top,
                        width: activeObject.width * activeObject.scaleX,
                        height: activeObject.height * activeObject.scaleY,
                        fill: 'transparent',
                        selectable: false,
                        evented: false
                    });

                    activeObject.lockedCover = rect;
                    canvas.add(rect);
                    rect.moveTo(activeObject.get('zIndex'));
                    activeObject.moveTo(activeObject.get('zIndex') + 1);
                } else {
                    if (activeObject.lockedCover) {
                        canvas.remove(activeObject.lockedCover);
                        activeObject.lockedCover = null;
                    }
                }

                // Remove o foco/seleção do objeto
                canvas.discardActiveObject();
                canvas.requestRenderAll();
            } else {
                alert('Nenhum objeto selecionado.');
            }
        }

        const lockButton = document.querySelector('#lock-toggle');
        lockButton.addEventListener('click', toggleLockObject);

        document.addEventListener('click', function(event) {
            const upperCanvas = document.querySelector('.upper-canvas');

            if (event.target !== upperCanvas && event.target !== document.querySelector('#editor') &&
                event.target !== document.querySelector('#color') && event.target !== document.querySelector('#bold') &&
                event.target !== document.querySelector('#italic') && event.target !== document.querySelector('#remove-element') &&
                event.target !== document.querySelector('#move-forward') && event.target !== document.querySelector('#move-backward') &&
                event.target !== document.querySelector('#send-text') && event.target !== document.querySelector('#font-family-dropdown') &&
                event.target !== document.querySelector('#bg-color'))
            {
                canvas.discardActiveObject();
                canvas.requestRenderAll();
            }
        });

    </script>

{% endblock %}
